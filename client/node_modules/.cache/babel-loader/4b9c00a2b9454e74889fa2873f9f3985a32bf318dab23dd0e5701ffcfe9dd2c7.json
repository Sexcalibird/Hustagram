{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosPrivate } from \"../axios/axios\";\nconst initialState = {\n  user: null,\n  profile: null\n};\nexport const getAllUsers = createAsyncThunk('user/getAllUsers', async () => {\n  try {\n    const response = await axiosPrivate.get(`/users`);\n    return response.data;\n  } catch (err) {\n    return err.message;\n  }\n});\nexport const fetchUser = createAsyncThunk('user/fetchUser', async _ref => {\n  let {\n    username\n  } = _ref;\n  try {\n    const response = await axiosPrivate.get(`/users/${username}`);\n    return response.data;\n  } catch (err) {\n    return err.message;\n  }\n});\nexport const fetchNameAndAvatar = createAsyncThunk('user/fetchNameAndAvatar', async _ref2 => {\n  let {\n    userId\n  } = _ref2;\n  try {\n    const response = await axiosPrivate.get(`/users/p/${userId}`);\n    return response.data;\n  } catch (err) {\n    return err.message;\n  }\n});\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    clearUsers() {\n      return {\n        ...initialState\n      };\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(getAllUsers.fulfilled, (state, action) => {}).addCase(fetchUser.fulfilled, (state, action) => {\n      state.profile = action.payload;\n    }).addCase(fetchUser.rejected, (state, action) => {\n      console.log(action.err.message);\n    }).addCase(fetchNameAndAvatar.fulfilled, (state, action) => {\n      state.user = action.payload;\n    });\n  }\n});\nexport const getUser = state => state.users.user;\nexport const getProfile = state => state.users.profile;\nexport const {\n  clearUsers\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axiosPrivate","initialState","user","profile","getAllUsers","response","get","data","err","message","fetchUser","username","fetchNameAndAvatar","userId","usersSlice","name","reducers","clearUsers","extraReducers","builder","addCase","fulfilled","state","action","payload","rejected","console","log","getUser","users","getProfile","actions","reducer"],"sources":["C:/Users/ADMIN/IdeaProjects/datn/client/src/redux/usersSlice.js"],"sourcesContent":["import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {axiosPrivate} from \"../axios/axios\";\r\n\r\nconst initialState = {\r\n    user: null,\r\n    profile: null,\r\n}\r\n\r\nexport const getAllUsers = createAsyncThunk('user/getAllUsers', async () => {\r\n    try {\r\n        const response = await axiosPrivate.get(`/users`)\r\n        return response.data\r\n    } catch (err) {\r\n        return err.message\r\n    }\r\n})\r\n\r\nexport const fetchUser = createAsyncThunk('user/fetchUser',async ({username}) => {\r\n    try {\r\n        const response = await axiosPrivate.get(`/users/${username}`)\r\n        return response.data\r\n    } catch (err) {\r\n        return err.message\r\n    }\r\n})\r\n\r\nexport const fetchNameAndAvatar = createAsyncThunk('user/fetchNameAndAvatar', async ({userId}) => {\r\n    try {\r\n        const response = await axiosPrivate.get(`/users/p/${userId}`)\r\n        return response.data\r\n    } catch (err) {\r\n        return err.message\r\n    }\r\n})\r\n\r\nconst usersSlice = createSlice({\r\n    name: 'users',\r\n    initialState,\r\n    reducers: {\r\n        clearUsers() {\r\n            return {...initialState}\r\n        }\r\n    },\r\n    extraReducers(builder){\r\n        builder\r\n\r\n            .addCase(getAllUsers.fulfilled,(state,action) => {\r\n\r\n            })\r\n\r\n            .addCase(fetchUser.fulfilled,(state,action) => {\r\n                state.profile = action.payload\r\n            })\r\n            .addCase(fetchUser.rejected,(state, action) => {\r\n                console.log(action.err.message)\r\n            })\r\n\r\n            .addCase(fetchNameAndAvatar.fulfilled, (state, action) => {\r\n                state.user = action.payload\r\n            })\r\n    }\r\n})\r\n\r\nexport const getUser = (state) => state.users.user\r\nexport const getProfile = (state) => state.users.profile\r\nexport const {clearUsers} = usersSlice.actions\r\nexport default usersSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,gBAAgB,QAAO,kBAAkB;AAC9D,SAAQC,YAAY,QAAO,gBAAgB;AAE3C,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGL,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACxE,IAAI;IACA,MAAMM,QAAQ,GAAG,MAAML,YAAY,CAACM,GAAG,CAAE,QAAO,CAAC;IACjD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,OAAOA,GAAG,CAACC,OAAO;EACtB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGX,gBAAgB,CAAC,gBAAgB,EAAC,cAAsB;EAAA,IAAf;IAACY;EAAQ,CAAC;EACxE,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAML,YAAY,CAACM,GAAG,CAAE,UAASK,QAAS,EAAC,CAAC;IAC7D,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,OAAOA,GAAG,CAACC,OAAO;EACtB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMG,kBAAkB,GAAGb,gBAAgB,CAAC,yBAAyB,EAAE,eAAoB;EAAA,IAAb;IAACc;EAAM,CAAC;EACzF,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAML,YAAY,CAACM,GAAG,CAAE,YAAWO,MAAO,EAAC,CAAC;IAC7D,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,OAAOA,GAAG,CAACC,OAAO;EACtB;AACJ,CAAC,CAAC;AAEF,MAAMK,UAAU,GAAGhB,WAAW,CAAC;EAC3BiB,IAAI,EAAE,OAAO;EACbd,YAAY;EACZe,QAAQ,EAAE;IACNC,UAAU,GAAG;MACT,OAAO;QAAC,GAAGhB;MAAY,CAAC;IAC5B;EACJ,CAAC;EACDiB,aAAa,CAACC,OAAO,EAAC;IAClBA,OAAO,CAEFC,OAAO,CAAChB,WAAW,CAACiB,SAAS,EAAC,CAACC,KAAK,EAACC,MAAM,KAAK,CAEjD,CAAC,CAAC,CAEDH,OAAO,CAACV,SAAS,CAACW,SAAS,EAAC,CAACC,KAAK,EAACC,MAAM,KAAK;MAC3CD,KAAK,CAACnB,OAAO,GAAGoB,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CACDJ,OAAO,CAACV,SAAS,CAACe,QAAQ,EAAC,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC3CG,OAAO,CAACC,GAAG,CAACJ,MAAM,CAACf,GAAG,CAACC,OAAO,CAAC;IACnC,CAAC,CAAC,CAEDW,OAAO,CAACR,kBAAkB,CAACS,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACpB,IAAI,GAAGqB,MAAM,CAACC,OAAO;IAC/B,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMI,OAAO,GAAIN,KAAK,IAAKA,KAAK,CAACO,KAAK,CAAC3B,IAAI;AAClD,OAAO,MAAM4B,UAAU,GAAIR,KAAK,IAAKA,KAAK,CAACO,KAAK,CAAC1B,OAAO;AACxD,OAAO,MAAM;EAACc;AAAU,CAAC,GAAGH,UAAU,CAACiB,OAAO;AAC9C,eAAejB,UAAU,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}