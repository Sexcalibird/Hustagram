{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosPrivate } from \"../axios/axios\";\nconst initialState = {\n  notifications: [],\n  status: 'idle',\n  //'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\nexport const getNotification = createAsyncThunk('notification/getNotification', async (_ref, _ref2) => {\n  let {\n    id\n  } = _ref;\n  let {\n    rejectWithValue\n  } = _ref2;\n  try {\n    const response = await axiosPrivate.get(`/notification/${id}`);\n    return response.data;\n  } catch (err) {\n    return rejectWithValue(err.message);\n  }\n});\nexport const newNotification = createAsyncThunk('notification/newNotification', async (_ref3, _ref4) => {\n  let {\n    id,\n    postId,\n    userId,\n    text\n  } = _ref3;\n  let {\n    rejectWithValue\n  } = _ref4;\n  try {\n    const response = await axiosPrivate.post(`/notification/${id}`, {\n      postId,\n      userId,\n      text\n    });\n    return response.data;\n  } catch (err) {\n    return rejectWithValue(err.message);\n  }\n});\nconst notificationSlice = createSlice({\n  name: 'notification',\n  initialState,\n  reducers: {\n    receiveNews(state, action) {\n      state.notifications.push(action.payload);\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(getNotification.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(getNotification.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.notifications = action.payload;\n    });\n  }\n});\nexport const getNotifications = state => state.notification.notifications;\nexport const getNtfcStatus = state => state.notification.status;\nexport const {\n  receiveNews\n} = notificationSlice.actions;\nexport default notificationSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axiosPrivate","initialState","notifications","status","error","getNotification","id","rejectWithValue","response","get","data","err","message","newNotification","postId","userId","text","post","notificationSlice","name","reducers","receiveNews","state","action","push","payload","extraReducers","builder","addCase","pending","fulfilled","getNotifications","notification","getNtfcStatus","actions","reducer"],"sources":["C:/Users/ADMIN/IdeaProjects/datn/client/src/redux/notificationSlice.js"],"sourcesContent":["import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {axiosPrivate} from \"../axios/axios\";\r\n\r\nconst initialState = {\r\n    notifications: [],\r\n    status: 'idle', //'idle' | 'loading' | 'succeeded' | 'failed'\r\n    error: null\r\n}\r\n\r\nexport const getNotification = createAsyncThunk('notification/getNotification', async ({id},{rejectWithValue}) => {\r\n    try {\r\n        const response = await axiosPrivate.get(`/notification/${id}`)\r\n        return response.data\r\n    } catch (err) {\r\n        return rejectWithValue(err.message)\r\n    }\r\n})\r\n\r\nexport const newNotification = createAsyncThunk('notification/newNotification', async ({id, postId, userId, text},{rejectWithValue}) => {\r\n    try {\r\n        const response = await axiosPrivate.post(`/notification/${id}`, {postId, userId, text})\r\n        return response.data\r\n    } catch (err) {\r\n        return rejectWithValue(err.message)\r\n    }\r\n})\r\n\r\nconst notificationSlice = createSlice({\r\n    name: 'notification',\r\n    initialState,\r\n    reducers: {\r\n        receiveNews(state, action) {\r\n            state.notifications.push(action.payload)\r\n        }\r\n    },\r\n    extraReducers(builder){\r\n        builder\r\n\r\n            .addCase(getNotification.pending, (state, action) => {\r\n                state.status = 'loading'\r\n            })\r\n            .addCase(getNotification.fulfilled, (state, action) => {\r\n                state.status = 'succeeded'\r\n                state.notifications = action.payload\r\n            })\r\n\r\n    }\r\n})\r\n\r\nexport const getNotifications = (state) => state.notification.notifications\r\nexport const getNtfcStatus = (state) => state.notification.status\r\nexport const {receiveNews} = notificationSlice.actions\r\nexport default notificationSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,gBAAgB,QAAO,kBAAkB;AAC9D,SAAQC,YAAY,QAAO,gBAAgB;AAE3C,MAAMC,YAAY,GAAG;EACjBC,aAAa,EAAE,EAAE;EACjBC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGN,gBAAgB,CAAC,8BAA8B,EAAE,uBAAkC;EAAA,IAA3B;IAACO;EAAE,CAAC;EAAA,IAAC;IAACC;EAAe,CAAC;EACzG,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMR,YAAY,CAACS,GAAG,CAAE,iBAAgBH,EAAG,EAAC,CAAC;IAC9D,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,OAAOJ,eAAe,CAACI,GAAG,CAACC,OAAO,CAAC;EACvC;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,eAAe,GAAGd,gBAAgB,CAAC,8BAA8B,EAAE,wBAAwD;EAAA,IAAjD;IAACO,EAAE;IAAEQ,MAAM;IAAEC,MAAM;IAAEC;EAAI,CAAC;EAAA,IAAC;IAACT;EAAe,CAAC;EAC/H,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMR,YAAY,CAACiB,IAAI,CAAE,iBAAgBX,EAAG,EAAC,EAAE;MAACQ,MAAM;MAAEC,MAAM;MAAEC;IAAI,CAAC,CAAC;IACvF,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,OAAOJ,eAAe,CAACI,GAAG,CAACC,OAAO,CAAC;EACvC;AACJ,CAAC,CAAC;AAEF,MAAMM,iBAAiB,GAAGpB,WAAW,CAAC;EAClCqB,IAAI,EAAE,cAAc;EACpBlB,YAAY;EACZmB,QAAQ,EAAE;IACNC,WAAW,CAACC,KAAK,EAAEC,MAAM,EAAE;MACvBD,KAAK,CAACpB,aAAa,CAACsB,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAC5C;EACJ,CAAC;EACDC,aAAa,CAACC,OAAO,EAAC;IAClBA,OAAO,CAEFC,OAAO,CAACvB,eAAe,CAACwB,OAAO,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACnB,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC,CACDyB,OAAO,CAACvB,eAAe,CAACyB,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACnDD,KAAK,CAACnB,MAAM,GAAG,WAAW;MAC1BmB,KAAK,CAACpB,aAAa,GAAGqB,MAAM,CAACE,OAAO;IACxC,CAAC,CAAC;EAEV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMM,gBAAgB,GAAIT,KAAK,IAAKA,KAAK,CAACU,YAAY,CAAC9B,aAAa;AAC3E,OAAO,MAAM+B,aAAa,GAAIX,KAAK,IAAKA,KAAK,CAACU,YAAY,CAAC7B,MAAM;AACjE,OAAO,MAAM;EAACkB;AAAW,CAAC,GAAGH,iBAAiB,CAACgB,OAAO;AACtD,eAAehB,iBAAiB,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}