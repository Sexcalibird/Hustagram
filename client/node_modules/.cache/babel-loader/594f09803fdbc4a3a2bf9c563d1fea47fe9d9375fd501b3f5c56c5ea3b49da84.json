{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosPrivate } from \"../axios/axios\";\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  //'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  try {\n    const response = await axiosPrivate.get('/posts');\n    return response.data;\n  } catch (err) {\n    return err.message;\n  }\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initialPost => {\n  try {\n    const response = await axiosPrivate.post('/posts', initialPost);\n    return response.data;\n  } catch (err) {\n    return err.message;\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(getUser.fulfilled, (state, action) => {\n      state.user = action.payload;\n    }).addCase(getUser.rejected, (state, action) => {\n      console.log(action.error.message);\n    });\n  }\n});\nexport const getProfile = state => state.users.user;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axiosPrivate","initialState","posts","status","error","fetchPosts","response","get","data","err","message","addNewPost","initialPost","post","postsSlice","name","reducers","extraReducers","builder","addCase","getUser","fulfilled","state","action","user","payload","rejected","console","log","getProfile","users","reducer"],"sources":["C:/Users/ADMIN/IdeaProjects/datn/client/src/redux/postsSlice.js"],"sourcesContent":["import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {axiosPrivate} from \"../axios/axios\";\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    status: 'idle', //'idle' | 'loading' | 'succeeded' | 'failed'\r\n    error: null\r\n}\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\r\n    try {\r\n        const response = await axiosPrivate.get('/posts')\r\n        return response.data\r\n    } catch (err) {\r\n        return err.message\r\n    }\r\n})\r\n\r\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async (initialPost) => {\r\n    try {\r\n        const response = await axiosPrivate.post('/posts', initialPost)\r\n        return response.data\r\n    } catch (err) {\r\n        return err.message\r\n    }\r\n})\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers(builder){\r\n        builder\r\n            .addCase(getUser.fulfilled,(state,action) => {\r\n                state.user = action.payload\r\n            })\r\n            .addCase(getUser.rejected,(state, action) => {\r\n                console.log(action.error.message)\r\n            })\r\n\r\n    }\r\n})\r\n\r\nexport const getProfile = (state) => state.users.user\r\nexport default postsSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,gBAAgB,QAAO,kBAAkB;AAC9D,SAAQC,YAAY,QAAO,gBAAgB;AAE3C,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGN,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACvE,IAAI;IACA,MAAMO,QAAQ,GAAG,MAAMN,YAAY,CAACO,GAAG,CAAC,QAAQ,CAAC;IACjD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,OAAOA,GAAG,CAACC,OAAO;EACtB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAGZ,gBAAgB,CAAC,kBAAkB,EAAE,MAAOa,WAAW,IAAK;EAClF,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMN,YAAY,CAACa,IAAI,CAAC,QAAQ,EAAED,WAAW,CAAC;IAC/D,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,OAAOA,GAAG,CAACC,OAAO;EACtB;AACJ,CAAC,CAAC;AAEF,MAAMI,UAAU,GAAGhB,WAAW,CAAC;EAC3BiB,IAAI,EAAE,OAAO;EACbd,YAAY;EACZe,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,CAACC,OAAO,EAAC;IAClBA,OAAO,CACFC,OAAO,CAACC,OAAO,CAACC,SAAS,EAAC,CAACC,KAAK,EAACC,MAAM,KAAK;MACzCD,KAAK,CAACE,IAAI,GAAGD,MAAM,CAACE,OAAO;IAC/B,CAAC,CAAC,CACDN,OAAO,CAACC,OAAO,CAACM,QAAQ,EAAC,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACzCI,OAAO,CAACC,GAAG,CAACL,MAAM,CAACnB,KAAK,CAACM,OAAO,CAAC;IACrC,CAAC,CAAC;EAEV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMmB,UAAU,GAAIP,KAAK,IAAKA,KAAK,CAACQ,KAAK,CAACN,IAAI;AACrD,eAAeV,UAAU,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}