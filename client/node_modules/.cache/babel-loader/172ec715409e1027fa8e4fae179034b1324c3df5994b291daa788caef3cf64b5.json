{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\IdeaProjects\\\\datn\\\\client\\\\src\\\\pages\\\\savedPost\\\\SavedPost.js\",\n  _s = $RefreshSig$();\nimport './savedPost.css';\nimport { Footer } from \"../../components\";\nimport { useAuth } from \"../../hooks\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchSavedPost, getPosts, getPostsError, getPostsStatus } from \"../../redux/postsSlice\";\nimport { useEffect } from \"react\";\nimport Loading from \"../../components/Loading/Loading\";\nimport PostSquare from \"../../components/PostSquare/PostSquare\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SavedPost = () => {\n  _s();\n  const auth = useAuth();\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const postStatus = useSelector(getPostsStatus);\n  const error = useSelector(getPostsError);\n  useEffect(() => {\n    dispatch(fetchSavedPost({\n      userId: auth._id\n    }));\n  }, []);\n  let content;\n  if (postStatus === 'loading') {\n    content = /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 19\n    }, this);\n  } else if (postStatus === 'succeeded') {\n    const saved = posts.slice().reverse();\n    content = saved.map(post => /*#__PURE__*/_jsxDEV(PostSquare, {\n      post: post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 37\n    }, this));\n  } else if (postStatus === 'failed') {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 19\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"saved-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"saved-text\",\n      children: \"Only you can see what you've saved\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gallery\",\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(SavedPost, \"wbF286TieQzDJH9tOyT2IstPwp0=\", false, function () {\n  return [useAuth, useDispatch, useSelector, useSelector, useSelector];\n});\n_c = SavedPost;\nexport default SavedPost;\nvar _c;\n$RefreshReg$(_c, \"SavedPost\");","map":{"version":3,"names":["Footer","useAuth","useDispatch","useSelector","fetchSavedPost","getPosts","getPostsError","getPostsStatus","useEffect","Loading","PostSquare","SavedPost","auth","dispatch","posts","postStatus","error","userId","_id","content","saved","slice","reverse","map","post"],"sources":["C:/Users/ADMIN/IdeaProjects/datn/client/src/pages/savedPost/SavedPost.js"],"sourcesContent":["import './savedPost.css'\r\nimport {Footer} from \"../../components\";\r\nimport {useAuth} from \"../../hooks\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchSavedPost, getPosts, getPostsError, getPostsStatus} from \"../../redux/postsSlice\";\r\nimport {useEffect} from \"react\";\r\nimport Loading from \"../../components/Loading/Loading\";\r\nimport PostSquare from \"../../components/PostSquare/PostSquare\";\r\n\r\nconst SavedPost = () => {\r\n\r\n    const auth = useAuth()\r\n    const dispatch = useDispatch()\r\n    const posts = useSelector(getPosts)\r\n    const postStatus = useSelector(getPostsStatus);\r\n    const error = useSelector(getPostsError);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchSavedPost({userId: auth._id}))\r\n    },[])\r\n\r\n    let content;\r\n    if (postStatus === 'loading') {\r\n        content = <Loading/>;\r\n    } else if (postStatus === 'succeeded') {\r\n        const saved = posts.slice().reverse()\r\n        content = saved.map(post => <PostSquare key={post._id} post={post} />)\r\n    } else if (postStatus === 'failed') {\r\n        content = <p>{error}</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"saved-container\">\r\n            <p className=\"saved-text\">Only you can see what you've saved</p>\r\n            <div className=\"gallery\">\r\n                {content}\r\n            </div>\r\n            <Footer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SavedPost"],"mappings":";;AAAA,OAAO,iBAAiB;AACxB,SAAQA,MAAM,QAAO,kBAAkB;AACvC,SAAQC,OAAO,QAAO,aAAa;AACnC,SAAQC,WAAW,EAAEC,WAAW,QAAO,aAAa;AACpD,SAAQC,cAAc,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,cAAc,QAAO,wBAAwB;AAC9F,SAAQC,SAAS,QAAO,OAAO;AAC/B,OAAOC,OAAO,MAAM,kCAAkC;AACtD,OAAOC,UAAU,MAAM,wCAAwC;AAAC;AAEhE,MAAMC,SAAS,GAAG,MAAM;EAAA;EAEpB,MAAMC,IAAI,GAAGX,OAAO,EAAE;EACtB,MAAMY,QAAQ,GAAGX,WAAW,EAAE;EAC9B,MAAMY,KAAK,GAAGX,WAAW,CAACE,QAAQ,CAAC;EACnC,MAAMU,UAAU,GAAGZ,WAAW,CAACI,cAAc,CAAC;EAC9C,MAAMS,KAAK,GAAGb,WAAW,CAACG,aAAa,CAAC;EAExCE,SAAS,CAAC,MAAM;IACZK,QAAQ,CAACT,cAAc,CAAC;MAACa,MAAM,EAAEL,IAAI,CAACM;IAAG,CAAC,CAAC,CAAC;EAChD,CAAC,EAAC,EAAE,CAAC;EAEL,IAAIC,OAAO;EACX,IAAIJ,UAAU,KAAK,SAAS,EAAE;IAC1BI,OAAO,gBAAG,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAE;EACxB,CAAC,MAAM,IAAIJ,UAAU,KAAK,WAAW,EAAE;IACnC,MAAMK,KAAK,GAAGN,KAAK,CAACO,KAAK,EAAE,CAACC,OAAO,EAAE;IACrCH,OAAO,GAAGC,KAAK,CAACG,GAAG,CAACC,IAAI,iBAAI,QAAC,UAAU;MAAgB,IAAI,EAAEA;IAAK,GAArBA,IAAI,CAACN,GAAG;MAAA;MAAA;MAAA;IAAA,QAAgB,CAAC;EAC1E,CAAC,MAAM,IAAIH,UAAU,KAAK,QAAQ,EAAE;IAChCI,OAAO,gBAAG;MAAA,UAAIH;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK;EAC5B;EAEA,oBACI;IAAK,SAAS,EAAC,iBAAiB;IAAA,wBAC5B;MAAG,SAAS,EAAC,YAAY;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAuC,eAChE;MAAK,SAAS,EAAC,SAAS;MAAA,UACnBG;IAAO;MAAA;MAAA;MAAA;IAAA,QACN,eACN,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACP;AAEd,CAAC;AAAA,GA/BKR,SAAS;EAAA,QAEEV,OAAO,EACHC,WAAW,EACdC,WAAW,EACNA,WAAW,EAChBA,WAAW;AAAA;AAAA,KANvBQ,SAAS;AAiCf,eAAeA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}